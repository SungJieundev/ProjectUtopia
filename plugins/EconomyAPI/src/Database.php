<?php

/*
 * Auto-generated by libasynql-fx
 * Created from mysql.sql
 */

declare(strict_types=1);

namespace alvin0319\EconomyAPI;

use Generator;
use poggit\libasynql\DataConnector;
use SOFe\AwaitGenerator\Await;

final class Database{
	public function __construct(private DataConnector $conn){ }

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:11
	 *
	 * @param string $name
	 * @param string $currency
	 * @param float  $defaultMoney
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function economyapiCreate(string $name, string $currency, float $defaultMoney,) : Generator{
		$this->conn->executeInsert("economyapi.create", ["name" => $name, "currency" => $currency, "defaultMoney" => $defaultMoney,], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:16
	 *
	 * @param string $name
	 * @param string $currency
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function economyapiGet(string $name, string $currency,) : Generator{
		$this->conn->executeSelect("economyapi.get", ["name" => $name, "currency" => $currency,], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:42
	 *
	 * @param string $currency
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function economyapiGetrows(string $currency,) : Generator{
		$this->conn->executeSelect("economyapi.getRows", ["currency" => $currency,], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:27
	 *
	 * @param string $currency
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function economyapiGetAll(string $currency,) : Generator{
		$this->conn->executeSelect("economyapi.get_all", ["currency" => $currency,], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:5
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function economyapiInit() : Generator{
		$this->conn->executeChange("economyapi.init", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:38
	 *
	 * @param string $currency
	 * @param int    $page
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function economyapiTop(string $currency, int $page,) : Generator{
		$this->conn->executeSelect("economyapi.top", ["currency" => $currency, "page" => $page,], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:23
	 *
	 * @param string $name
	 * @param string $currency
	 * @param float  $money
	 * @param int    $transactionBlocked
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function economyapiUpdate(string $name, string $currency, float $money, int $transactionBlocked,) : Generator{
		$this->conn->executeChange("economyapi.update", ["name" => $name, "currency" => $currency, "money" => $money, "transactionBlocked" => $transactionBlocked,], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/mysql.sql:33
	 *
	 * @param string $name
	 * @param string $currency
	 * @param int    $transactionBlocked
	 *
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function economyapiUpdateState(string $name, string $currency, int $transactionBlocked,) : Generator{
		$this->conn->executeChange("economyapi.update_state", ["name" => $name, "currency" => $currency, "transactionBlocked" => $transactionBlocked,], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}
}
